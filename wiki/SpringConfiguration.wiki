Since the rtmp handling is derived from red5 and red5 needs spring to boostrap and configure MuleRTMP also needs spring.

The following xml configures the red5 part with the MuleRTMP classes and bootstraps all needed classes

`

<bean id="global.handler" class="org.red5.server.MuleRTMPCoreHandler"/>

 <bean id="mule.serviceInvoker" class="wo.lf.red5.server.service.MuleRTMPServiceInvoker">
  <property name="messageBroker" ref="_messageBroker" />  
 </bean>

 <bean id="clientRegistry" class="org.red5.server.ClientRegistry" />
 <bean id="globalContext" class="org.red5.server.MuleRTMPGlobalContext">
  <property name="clientRegistry" ref="clientRegistry" />
  <property name="serviceInvoker" ref="mule.serviceInvoker" />
 </bean>

 <bean id="globalScope" class="org.red5.server.Scope" init-method="init">
  <property name="context" ref="globalContext"/>
  <property name="handler" ref="global.handler" />
 </bean>

 <bean id="rtmpMinaConnManager" class="org.red5.server.net.rtmp.RTMPConnManager"/>

 <bean id="rtmpHandler" class="org.red5.server.net.rtmp.MuleRTMPHandler">
  <property name="statusObjectService">
   <bean class="org.red5.server.net.rtmp.status.StatusObjectService" init-method="initialize">
    <property name="serializer" ref="serializer" />
   </bean>
  </property>
        
  <property name="globalScope" ref="globalScope"/>

 </bean>

 <!-- Serializes objects to AMF binary -->
 <bean id="serializer" class="org.red5.io.object.Serializer"/>
 <!-- Deserializes objects from AMF binary -->
 <bean id="deserializer" class="org.red5.io.object.Deserializer"/>

 <!-- RTMP codec factory -->
 <bean id="rtmpCodecFactory" class="org.red5.server.net.rtmp.codec.RTMPMinaCodecFactory" autowire="byType" init-method="init">
  <property name="minaEncoder">
   <bean class="org.red5.server.net.rtmp.codec.MuleRTMPMinaProtocolEncoder">
    <property name="serializer">
     <ref bean="serializer"/>
    </property>
   </bean>
  </property>
  <property name="minaDecoder">
   <bean class="org.red5.server.net.rtmp.codec.MuleRTMPMinaProtocolDecoder">
    <property name="deserializer">
     <ref bean="deserializer"/>
    </property>
   </bean>
  </property>
 </bean>

 <!-- RTMP Mina IO Handler -->
 <bean id="rtmpMinaIoHandler" class="org.red5.server.net.rtmp.RTMPMinaIoHandler">
  <property name="handler" ref="rtmpHandler"/>
  <property name="codecFactory" ref="rtmpCodecFactory"/>
  <property name="rtmpConnManager" ref="rtmpMinaConnManager"/>
 </bean>

 <!-- RTMP Mina Transport -->
 <bean id="rtmpTransport" class="org.red5.server.net.rtmp.RTMPMinaTransport" init-method="start" destroy-method="stop">
  <property name="ioHandler" ref="rtmpMinaIoHandler"/>
  <property name="connectors">
   <list>
    <bean class="java.net.InetSocketAddress">
     <constructor-arg index="0" type="java.lang.String" value="${rtmp.host}"/>
     <constructor-arg index="1" type="int" value="${rtmp.port}"/>
    </bean>
   </list>
  </property>
  <property name="receiveBufferSize" value="${rtmp.receive_buffer_size}"/>
  <property name="jmxPollInterval" value="1000"/>
  <property name="tcpNoDelay" value="${rtmp.tcp_nodelay}"/>
 </bean>

 <!-- RTMP Mina Connection -->
 <bean id="rtmpMinaConnection" scope="prototype" class="org.red5.server.net.rtmp.MuleRTMPMinaConnection">
  <!-- Ping clients every X ms. Set to 0 to disable ghost detection code. -->
  <property name="pingInterval" value="${rtmp.ping_interval}"/>
  <!-- Disconnect client after X ms of not responding. -->
  <property name="maxInactivity" value="${rtmp.max_inactivity}"/>
  <!-- Max. time in milliseconds to wait for a valid handshake. -->
  <property name="maxHandshakeTimeout" value="5000"/>
 </bean>
`